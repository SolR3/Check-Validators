#!/usr/bin/env python

# TODO
#     - Turn RichPrinter into abstract base class
#     - Ask about running local subtensor

# bittensor import
import bittensor

# standard imports
import argparse
from collections import namedtuple
from concurrent.futures import ThreadPoolExecutor
import numpy
from rich.text import Text
from rich.table import Table
from rich.console import Console
import threading
import time


# TODO - Make this better.
# Can't use this in the actual data gathering as the
# user may specify the --local-subtensor arg instead.
# Throw away subnet 0.
SUBNET_IDS =  bittensor.subtensor().get_subnets()[1:]

TOTAL_EMISSION = 295.5 # TODO - Need some way to verify this
MIN_STAKE_THRESHOLD = 5000 # TODO - Need some way to verify this
DEFAULT_VTRUST_THRESHOLD = 0.2
DEFAULT_UPDATED_THRESHOLD = 3


def _parse_args():
    class SubnetsAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            min_subnet = SUBNET_IDS[0]
            max_subnet = SUBNET_IDS[-1]
            bad_values = [v for v in values if v < min_subnet or v > max_subnet]
            if bad_values:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Subnet values are not between {min_subnet} "
                            f"and {max_subnet}: {bad_values}")
            setattr(namespace, self.dest, values)
    
    class ThreadsAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values < 0:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Thread value ({values}) must be >= 0.")
            setattr(namespace, self.dest, values)
    
    class VtrustAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 0 or values > 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Vtrust threshold ({values}) must be in the "
                             "range (0-1].")
            setattr(namespace, self.dest, values)
    
    class UpdatedAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Updated threshold ({values}) must be > 1.")
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-l", "--local-subtensor",
        action="store_true",
        help="When specified, use a local running subtensor. When not "
             "specified, use the 'finney' network subtensor.")

    parser.add_argument(
        "-s", "--subnets",
        nargs="+",
        type=int,
        action = SubnetsAction,
        help="When specified, the list of netuids are checked. When not "
             "specified, all subnets are checked.")

    parser.add_argument(
        "-V", "--vtrust-threshold",
        type=float,
        default=DEFAULT_VTRUST_THRESHOLD,
        action = VtrustAction,
        help="The vTrust threshold. Float value betweeon (0-1]. If "
             "Rizzo vTrust < (avg vTrust - threshold) then it is bad. "
            f"The default value is {DEFAULT_VTRUST_THRESHOLD}.")

    parser.add_argument(
        "-U", "--updated-threshold",
        type=float,
        default=DEFAULT_UPDATED_THRESHOLD,
        action = UpdatedAction,
        help="The Updated value threshold. Float value > 1. If "
             "Rizzo Updated > (subnet tempo * threshold) then it is bad. "
            f"The default value is {DEFAULT_UPDATED_THRESHOLD}.")

    parser.add_argument(
        "-u", "--rizzo-updated-only",
        action="store_false",
        dest="all_updated_values",
        help="When specified, only display the Rizzo Updated values and skip "
             "the min/max/avg Updated values of the rest of the validators. "
             "This will speed up the data gathering.")

    parser.add_argument(
        "-t", "--threads",
        type=int,
        default=0,
        action = ThreadsAction,
        help="Gather the subnet metagraph data using the specified number of "
             "threads. When not specified, multithreading is not used.")

    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="When specified, the vTrust and Updated values for all subnets "
             "are printed out. When not specified, only the bad subnets are "
             "printed out.")

    parser.add_argument(
        "-n", "--no-table",
        action="store_false",
        dest="table",
        help="When specified, prints all validators out one by one. When not "
             "specified, the validator data is printed in table form.")

    return parser.parse_args()


class SubnetData:
    ValidatorData = namedtuple(
    "ValidatorData", [
        "netuid",
        "subnet_emission",
        "subnet_tempo",
        "num_validators",
        "rizzo_stake_rank",
        "rizzo_emission",
        "rizzo_vtrust",
        "max_vtrust",
        "avg_vtrust",
        "min_vtrust",
        "rizzo_updated",
        "min_updated",
        "avg_updated",
        "max_updated",])

    # constants
    # _rizzo_hotkey = "5CXRfP2ekFhe62r7q3vppRajJmGhTi7vwvb2yr79jveZ282w"
    _rizzo_hotkey = "5F2CsUDVbRbVMXTh9fAzF9GacjVX7UapvRxidrxe7z8BYckQ"

    def __init__(self, netuids, network, get_all_updated_values):
        self._netuids = netuids
        self._network = network
        self._get_all_updated_values = get_all_updated_values

        # Create locks
        self._missing_validators_lock = threading.Lock()
        self._validator_data_lock = threading.Lock()

        # Initialize data
        self._validator_data = {}
        self._missing_validators = []

        # Get subtensor for obtaining the updated values.
        self._subtensor = bittensor.subtensor(network=network)

    def get_subnet_data(self, threads):
        print("\nGathering data")
        max_attempts = 5
        netuids = self._netuids
        for attempt in range(1, max_attempts+1):
            print(f"\nAttempt {attempt} of {max_attempts}")
            if threads:
                with ThreadPoolExecutor(max_workers=threads) as executor:
                    executor.map(self._get_validator_data,
                        netuids, [True for _ in range(len(netuids))])
            else:
                for netuid in netuids:
                    self._get_validator_data(netuid, False)

            # Get netuids missing data
            netuids = list(set(netuids).difference(
                        set(self._validator_data)).difference(
                            set([int(n) for n in self._missing_validators])))
            if netuids:
                print("\nFailed to gather data for subnets: "
                      f"{', '.join([str(n) for n in netuids])}.")
            else:
                break

    def _get_validator_data(self, netuid, init_new_subtensor):
        start_time = time.time()
        print(f"\nObtaining data for subnet {netuid}\n")
        
        # When threading, re-get subtensor for obtaining the updated values.
        # The subtensor object can't seem to handle multiple threads calling
        # the blocks_since_last_update() method at the same time.
        subtensor = bittensor.subtensor(network=self._network) \
                        if init_new_subtensor \
                            else self._subtensor

        # Get metagraph for the subnet.
        metagraph = subtensor.metagraph(netuid=netuid)
    
        # Get emission percentage for the subnet.
        subnet_emission = numpy.sum(metagraph.E) / TOTAL_EMISSION * 100

        # Get subnet tempo (used for determining bad Updated values)
        subnet_tempo = subtensor.get_subnet_hyperparameters(netuid).tempo

        # Get UID for Rizzo.
        try:
            rizzo_uid = metagraph.hotkeys.index(self._rizzo_hotkey)
        except ValueError:
            print("\nWARNING: Rizzo validator not running on subnet "
                 f"{netuid}")
            with self._missing_validators_lock:
                self._missing_validators.append(str(netuid))
            return
        
        # Get Rizzo validator values
        rizzo_emission = metagraph.E[rizzo_uid]
        rizzo_vtrust = metagraph.Tv[rizzo_uid]
        rizzo_updated = subtensor.blocks_since_last_update(
            netuid=netuid, uid=rizzo_uid)

        # Get all validators that have a valid stake amount.
        valid_uids = [i for (i, s) in enumerate(metagraph.S)
                      if i != rizzo_uid and s > MIN_STAKE_THRESHOLD]
        num_validators = len(valid_uids) + 1

        # Get stake-wise ranking for Rizzo
        rizzo_stake = metagraph.S[rizzo_uid]
        rizzo_stake_rank = (
            len(metagraph.S) - sorted(metagraph.S).index(rizzo_stake))

        # Get min/max/average vTrust values.
        vtrusts = [metagraph.Tv[uid] for uid in valid_uids]
        max_vtrust = numpy.max(vtrusts)
        avg_vtrust = numpy.average(vtrusts)
        min_vtrust = numpy.min(vtrusts)

        # Get min/max/average Updated values.
        if self._get_all_updated_values:
            updateds = []
            for uid in valid_uids:
                updateds.append(subtensor.blocks_since_last_update(
                    netuid=netuid, uid=uid))
            min_updated = numpy.min(updateds)
            avg_updated = int(numpy.round(numpy.average(updateds)))
            max_updated = numpy.max(updateds)
        else:
            min_updated = None
            avg_updated = None
            max_updated = None

        # Store the data.
        with self._validator_data_lock:
            self._validator_data[netuid] = self.ValidatorData(
                netuid=netuid,
                subnet_emission=subnet_emission,
                subnet_tempo=subnet_tempo,
                num_validators=num_validators,
                rizzo_stake_rank=rizzo_stake_rank,
                rizzo_emission=rizzo_emission,
                rizzo_vtrust=rizzo_vtrust,
                max_vtrust=max_vtrust,
                avg_vtrust=avg_vtrust,
                min_vtrust=min_vtrust,
                rizzo_updated=rizzo_updated,
                min_updated=min_updated,
                avg_updated=avg_updated,
                max_updated=max_updated,)
        
        total_time = time.time() - start_time
        print(f"\nSubnet {netuid} data gathered in "
              f"{int(total_time)} seconds.")

    def print_validator_data(self, vtrust_threshold, updated_threshold,
                             verbose, subnets_specified, printer_class):
        printer = printer_class(self._get_all_updated_values)

        def sort_key(netuid):
            if netuid in self._validator_data:
                sort_key = self._validator_data[netuid].subnet_emission
                if printer.reverse_sort:
                    sort_key *= -1
                return sort_key
            return netuid
        
        total_emission = 0.0
        missing_data = []
        bad_validators = bool(self._missing_validators)
        sort_subnets = not subnets_specified
        print_total_emission = not subnets_specified

        # Loop through all subnets and print out
        # their vtrust and updated data.
        netuids = (sorted(self._netuids, key=sort_key)
                   if sort_subnets else self._netuids)
        for netuid in netuids:
            if netuid not in self._validator_data:
                if str(netuid) not in self._missing_validators:
                    missing_data.append(str(netuid))
                continue

            validator_data = self._validator_data[netuid]

            total_emission += validator_data.rizzo_emission

            bad_vtrust = (
                (validator_data.avg_vtrust -
                 validator_data.rizzo_vtrust) >
                    vtrust_threshold)
            bad_updated = (
                (validator_data.rizzo_updated /
                 validator_data.subnet_tempo) >
                    updated_threshold)
            
            bad_validators |= bad_vtrust | bad_updated

            if verbose or bad_vtrust or bad_updated:
                printer.update_printout(
                    validator_data, bad_vtrust, bad_updated)

        # Print extra stuff
        printer.add_extra_printout(
            self._missing_validators, missing_data, bad_validators,
            total_emission if print_total_emission else None)
        
        # Print everything
        printer.print_everything()


# TODO - Turn into abstract base class
class RichPrinter:
    _red = "9"
    _green = "10"
    _tab = "    "

    def __init__(self, print_all_updated_values):
        self._console = Console()
        self._extra_printout = []
        self._print_all_updated_values = print_all_updated_values

    def _get_style(self, is_bad):
        if is_bad:
            return f"color({self._red})"
        else:
            return f"color({self._green})"
    
    def add_extra_printout(self, missing_validators,
            missing_data, bad_validators, total_emission):
        
        if total_emission is not None:
            self._extra_printout.append(
                Text(f"\nTotal Emission = {total_emission:.5f}"))

        if missing_validators:
            self._extra_printout.append(
                 Text("\nRizzo validator is not running "
                      "on the following subnets:"
                      "\n===================="
                     f"\n{self._tab}{", ".join(missing_validators)}",
                      style=self._get_style(True)))

        if missing_data:
            self._extra_printout.append(
                 Text("\nFailed to obtain data from the following subnets."
                      "\n(Try running these separately)"
                      "\n===================="
                     f"\n{self._tab}{", ".join(sorted(missing_data))}",
                      style=self._get_style(True)))

        if not bad_validators:
            self._extra_printout.append(
                Text("\nALL SUBNETS ARE GOOD!",
                     style=self._get_style(False)))

    def print_everything(self):
        for text in self._extra_printout:
            self._console.print(text)


class TablePrinter(RichPrinter):
    reverse_sort = True

    def __init__(self, print_all_updated_values):
        super().__init__(print_all_updated_values)

        self._table = Table(title="Rizzo Validators")
        self._table.add_column(
            "Subnet", justify="center", no_wrap=True)
        self._table.add_column(
            "Subnet E", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo Rank", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo E", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Max vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Avg vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Min vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo U", justify="center", no_wrap=True)
        if self._print_all_updated_values:
            self._table.add_column(
                "Min U", justify="center", no_wrap=True)
            self._table.add_column(
                "Avg U", justify="center", no_wrap=True)
            self._table.add_column(
                "Max U", justify="center", no_wrap=True)

    def update_printout(self, validator_data, bad_vtrust, bad_updated):
        columns = [
            Text(f"{validator_data.netuid}",
                 style=self._get_style(bad_vtrust or bad_updated)),
            Text(f"{validator_data.subnet_emission:.2f}%"),
            Text(f"{validator_data.rizzo_stake_rank}/"
                 f"{validator_data.num_validators}"),
            Text(f"{validator_data.rizzo_emission:.5f}"),
            Text(f"{validator_data.rizzo_vtrust:.5f}",
                 style=self._get_style(bad_vtrust)),
            Text(f"{validator_data.max_vtrust:.5f}"),
            Text(f"{validator_data.avg_vtrust:.5f}"),
            Text(f"{validator_data.min_vtrust:.5f}"),
            Text(f"{validator_data.rizzo_updated}",
                 style=self._get_style(bad_updated)),
        ]
        if self._print_all_updated_values:
            columns.extend([
                Text(f"{validator_data.min_updated}"),
                Text(f"{validator_data.avg_updated}"),
                Text(f"{validator_data.max_updated}"),
            ])
        self._table.add_row(*columns)

    def print_everything(self):
        self._console.print(self._table)
        super().print_everything()


class ListPrinter(RichPrinter):
    reverse_sort = False

    def __init__(self, print_all_updated_values):
        super().__init__(print_all_updated_values)
        self._main_printout = [Text("Rizzo Validators")]
    
    def update_printout(self, validator_data, bad_vtrust, bad_updated):
        self._main_printout.append(Text("\nSubnet "
            f"{validator_data.netuid}",
            style=self._get_style(bad_vtrust or bad_updated)))

        self._main_printout.append(Text("Subnet emission = "
            f"{validator_data.subnet_emission:.2f}%"))

        self._main_printout.append(Text("Rizzo Stake rank: "
                f"{validator_data.rizzo_stake_rank}/"
                f"{validator_data.num_validators}"))

        self._main_printout.append(Text("Rizzo emission = "
            f"{validator_data.rizzo_emission:.5f}"))

        self._main_printout.append(Text("===================="))

        printout_list = (
            (validator_data.rizzo_vtrust, 
                Text(f"{self._tab}Rizzo vTrust = "
                     f"{validator_data.rizzo_vtrust:.5f}",
                     style=self._get_style(bad_vtrust))),
            (validator_data.max_vtrust,
                Text(f"{self._tab}Max vTrust   = "
                     f"{validator_data.max_vtrust:.5f}")),
            (validator_data.avg_vtrust,
                Text(f"{self._tab}Avg vTrust   = "
                     f"{validator_data.avg_vtrust:.5f}")),
            (validator_data.min_vtrust,
                Text(f"{self._tab}Min vTrust   = "
                     f"{validator_data.min_vtrust:.5f}"))
        )
        for _, printout_line in \
                reversed(sorted(printout_list, key=lambda i: i[0])):
            self._main_printout.append(printout_line)

        self._main_printout.append(Text("===================="))
        
        printout_list = [
            (validator_data.rizzo_updated,
                Text(f"{self._tab}Rizzo Updated = "
                     f"{validator_data.rizzo_updated}",
                     style=self._get_style(bad_updated)))
        ]
        if self._print_all_updated_values:
            printout_list.extend([
                (validator_data.min_updated,
                    Text(f"{self._tab}Min Updated   = "
                        f"{validator_data.min_updated}")),
                (validator_data.avg_updated,
                    Text(f"{self._tab}Avg Updated   = "
                        f"{validator_data.avg_updated}")),
                (validator_data.max_updated,
                    Text(f"{self._tab}Max Updated   = "
                        f"{validator_data.max_updated}"))
            ])
        for _, printout_line in \
                sorted(printout_list, key=lambda i: i[0]):
            self._main_printout.append(printout_line)

    def print_everything(self):
        for text in self._main_printout:
            self._console.print(text)
        super().print_everything()


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)
    
    runtime_text = f"{minutes} minutes, " if minutes else ""
    runtime_text += f"{seconds} seconds"
    
    return runtime_text


def main():
    options = _parse_args()
    if options.subnets:
        options.verbose = True

    start_time = time.time()

    network = "local" if options.local_subtensor else "finney"
    netuids = options.subnets or SUBNET_IDS
    subnet_data = SubnetData(netuids, network, options.all_updated_values)
    subnet_data.get_subnet_data(options.threads)

    total_time = time.time() - start_time

    if options.table:
        printer_class = TablePrinter
    else:
        printer_class = ListPrinter

    subnets_specified = bool(options.subnets)
    subnet_data.print_validator_data(
        options.vtrust_threshold,
        options.updated_threshold,
        options.verbose,
        subnets_specified,
        printer_class)
    print(f"\nSubnet data gathering took {format_time(round(total_time))}.\n")

if __name__ == "__main__":
    main()
