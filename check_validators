#!/usr/bin/env python3

# standard imports
import argparse
import os
import sys
import time

# Import local subnet_data module
sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path


def _parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-l", "--local-subtensor",
        help="Use the specified local subtensor (i.e. la, cali, titan, etc.). "
             "When not specified, use the 'finney' network subtensor."
    )

    parser.add_argument(
        "-s", "--subnets",
        nargs="+",
        type=int,
        help="When specified, the list of netuids are checked. When not "
             "specified, all subnets are checked."
    )
    
    parser.add_argument(
        "-c", "--chk-only",
        action="store_true",
        help="When specified, only subnets in which we are child-hotkeying "
             "are displayed. When not specified, all subnets are displayed."
    )

    parser.add_argument(
        "-k", "--coldkey",
        help="Specify a different coldkey to check than Rizzo."
    )

    parser.add_argument(
        "-n", "--vali-name",
        default="Rizzo",
        help="Specify a different validator name in the table printout."
    )

    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Print verbose output."
    )

    return parser.parse_args()


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)
    
    runtime_text = f"{minutes} minutes, " if minutes else ""
    runtime_text += f"{seconds} seconds"
    
    return runtime_text


def main(options):
    network = (
        f"ws://subtensor-{options.local_subtensor}.rizzo.network:9944"
        if options.local_subtensor
        else "finney"
    )
    netuids = options.subnets or bittensor.subtensor(network=network).get_subnets()[1:]
    sort_subnets = not bool(options.subnets)
    print_total_emission = not (options.chk_only or bool(options.subnets))

    start_time = time.time()
    validator_data = SubnetData(
        netuids, network, verbose=options.verbose, other_coldkey=options.coldkey
    ).validator_data
    subnet_data_printer = SubnetDataPrinter(
        validator_data, netuids, options.chk_only, sort_subnets,
        print_total_emission, options.vali_name
    )
    total_time = time.time() - start_time

    subnet_data_printer.print_validator_data()
    print(f"\nSubnet data gathering took {format_time(round(total_time))}.\n")


if __name__ == "__main__":
    options = _parse_args()

    # bittensor import
    import bittensor

    # Import local subnet_data module
    from subnet_data import SubnetData
    from subnet_status_printer import SubnetDataPrinter

    main(options)
