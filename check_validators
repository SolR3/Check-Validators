#!/usr/bin/env python

# bittensor import
# import bittensor

# standard imports
import argparse
import os
import sys
import time

# Import local subnet_data module
sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path

LOCAL_NETWORK = "ws://subtensor-moonbase.rizzo.network:9944"

# TODO - Make this better.
# Can't use this in the actual data gathering as the
# user may specify the --local-subtensor arg instead.
# Throw away subnet 0.
_SUBNET_IDS = None
def _get_subnets(network=LOCAL_NETWORK):
    global _SUBNET_IDS

    if not _SUBNET_IDS:
        _SUBNET_IDS = bittensor.subtensor(
            network=network).get_subnets()[1:]
    return _SUBNET_IDS


def _parse_args():
    
    class ThreadsAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values < 0:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Thread value ({values}) must be >= 0.")
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-l", "--local-subtensor",
        action="store_true",
        help="When specified, use a local running subtensor. When not "
             "specified, use the 'finney' network subtensor.")

    parser.add_argument(
        "-s", "--subnets",
        nargs="+",
        type=int,
        help="When specified, the list of netuids are checked. When not "
             "specified, all subnets are checked.")

    parser.add_argument(
        "-t", "--threads",
        type=int,
        default=0,
        action = ThreadsAction,
        help="Gather the subnet metagraph data using the specified number of "
             "threads. When not specified, multithreading is not used.")

    parser.add_argument(
        "-k", "--hotkey",
        help="Specify a different hotkey to check than Rizzo.")

    parser.add_argument(
        "-n", "--vali-name",
        default="Rizzo",
        help="Specify a different validator name in the table printout.")

    return parser.parse_args()


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)
    
    runtime_text = f"{minutes} minutes, " if minutes else ""
    runtime_text += f"{seconds} seconds"
    
    return runtime_text


def main(options):
    network = LOCAL_NETWORK if options.local_subtensor else "finney"
    netuids = options.subnets or _get_subnets(network)

    start_time = time.time()
    subnet_data_printer = SubnetDataPrinter(
        SubnetData,
        netuids, network, options.threads, True, options.hotkey)
    subnet_data_printer.set_netuids(netuids)
    total_time = time.time() - start_time

    sort_subnets = not bool(options.subnets)
    print_total_emission = not bool(options.subnets)
    subnet_data_printer.print_validator_data(
        sort_subnets,
        print_total_emission,
        options.vali_name)

    print(f"\nSubnet data gathering took {format_time(round(total_time))}.\n")


if __name__ == "__main__":
    options = _parse_args()

    # bittensor import
    import bittensor

    # Import local subnet_data module
    from subnet_data import SubnetData
    from subnet_printer import SubnetDataPrinter

    main(options)
