#!/usr/bin/env python

# bittensor import
import bittensor

# standard imports
import argparse
import os
import sys
import time

# Import local subnet_data module
sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path
from subnet_data import SubnetData
from subnet_printer import SubnetDataPrinter
from subnet_constants import DEFAULT_VTRUST_THRESHOLD, DEFAULT_UPDATED_THRESHOLD


# LOCAL_NETWORK = "ws://subtensor-cali.rizzo.network:9944"
LOCAL_NETWORK = "ws://subtensor-la.rizzo.network:9944"

# TODO - Make this better.
# Can't use this in the actual data gathering as the
# user may specify the --local-subtensor arg instead.
# Throw away subnet 0.
_SUBNET_IDS = None
def _get_subnets(network=LOCAL_NETWORK):
    global _SUBNET_IDS

    if not _SUBNET_IDS:
        _SUBNET_IDS = bittensor.subtensor(
            network=network).get_subnets()[1:]
    return _SUBNET_IDS


def _parse_args():
    class SubnetsAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            min_subnet = _get_subnets()[0]
            max_subnet = _get_subnets()[-1]
            bad_values = [v for v in values if v < min_subnet or v > max_subnet]
            if bad_values:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Subnet values are not between {min_subnet} "
                            f"and {max_subnet}: {bad_values}")
            setattr(namespace, self.dest, values)
    
    class ThreadsAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values < 0:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Thread value ({values}) must be >= 0.")
            setattr(namespace, self.dest, values)
    
    class VtrustAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values < 0 or values > 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Vtrust threshold ({values}) must be in the "
                             "range [0-1].")
            setattr(namespace, self.dest, values)
    
    class UpdatedAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Updated threshold ({values}) must be > 1.")
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-l", "--local-subtensor",
        action="store_true",
        help="When specified, use a local running subtensor. When not "
             "specified, use the 'finney' network subtensor.")

    parser.add_argument(
        "-s", "--subnets",
        nargs="+",
        type=int,
        action = SubnetsAction,
        help="When specified, the list of netuids are checked. When not "
             "specified, all subnets are checked.")

    parser.add_argument(
        "-V", "--vtrust-threshold",
        type=float,
        default=DEFAULT_VTRUST_THRESHOLD,
        action = VtrustAction,
        help="The vTrust threshold. Float value betweeon [0-1]. If "
             "Rizzo vTrust < (avg vTrust - threshold) then it is bad. "
            f"The default value is {DEFAULT_VTRUST_THRESHOLD}.")

    parser.add_argument(
        "-U", "--updated-threshold",
        type=float,
        default=DEFAULT_UPDATED_THRESHOLD,
        action = UpdatedAction,
        help="The Updated value threshold. Float value > 1. If "
             "Rizzo Updated > (subnet tempo * threshold) then it is bad. "
            f"The default value is {DEFAULT_UPDATED_THRESHOLD}.")

    parser.add_argument(
        "-t", "--threads",
        type=int,
        default=0,
        action = ThreadsAction,
        help="Gather the subnet metagraph data using the specified number of "
             "threads. When not specified, multithreading is not used.")

    return parser.parse_args()


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)
    
    runtime_text = f"{minutes} minutes, " if minutes else ""
    runtime_text += f"{seconds} seconds"
    
    return runtime_text


def main():
    options = _parse_args()

    network = LOCAL_NETWORK if options.local_subtensor else "finney"
    netuids = options.subnets or _get_subnets(network)
    
    start_time = time.time()
    subnet_data_printer = SubnetDataPrinter(
        SubnetData,
        netuids, network, options.threads, True)
    subnet_data_printer.set_netuids(netuids)
    total_time = time.time() - start_time

    sort_subnets = not bool(options.subnets)
    print_total_emission = not bool(options.subnets)
    subnet_data_printer.print_validator_data(
        options.vtrust_threshold,
        options.updated_threshold,
        sort_subnets,
        print_total_emission)

    print(f"\nSubnet data gathering took {format_time(round(total_time))}.\n")


if __name__ == "__main__":
    main()
