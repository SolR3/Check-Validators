#!/usr/bin/env python

# standard imports
import argparse
import os
import sys

# Import local subnet_data module
sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path
from subnet_data import SubnetDataFromJson
from subnet_printer import SubnetDataPrinter
from subnet_constants import DEFAULT_VTRUST_THRESHOLD, DEFAULT_UPDATED_THRESHOLD


def _parse_args():    
    class VtrustAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 0 or values > 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Vtrust threshold ({values}) must be in the "
                             "range (0-1].")
            setattr(namespace, self.dest, values)
    
    class UpdatedAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Updated threshold ({values}) must be > 1.")
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--json-file",
        required=True,
        help="The json filepath to read on the ssh host machine.")

    parser.add_argument(
        "--host",
        required=True,
        help="The ssh host address.")
    
    parser.add_argument(
        "--port",
        type=int,
        required=True,
        help="The ssh port of the host address.")
    
    parser.add_argument(
        "--user",
        required=True,
        help="The ssh user name to authenticate with.")
    
    auth_group = parser.add_mutually_exclusive_group(required=True)

    auth_group.add_argument(
        "--ssh-key",
        help="The ssh key to use for authenticating.")

    auth_group.add_argument(
        "--password",
        help="The password of the user to ssh as.")

    parser.add_argument(
        "-V", "--vtrust-threshold",
        type=float,
        default=DEFAULT_VTRUST_THRESHOLD,
        action = VtrustAction,
        help="The vTrust threshold. Float value betweeon (0-1]. If "
             "Rizzo vTrust < (avg vTrust - threshold) then it is bad. "
            f"The default value is {DEFAULT_VTRUST_THRESHOLD}.")

    parser.add_argument(
        "-U", "--updated-threshold",
        type=float,
        default=DEFAULT_UPDATED_THRESHOLD,
        action = UpdatedAction,
        help="The Updated value threshold. Float value > 1. If "
             "Rizzo Updated > (subnet tempo * threshold) then it is bad. "
            f"The default value is {DEFAULT_UPDATED_THRESHOLD}.")

    return parser.parse_args()


def main():
    options = _parse_args()

    subnet_data_printer = SubnetDataPrinter(
        SubnetDataFromJson,
        options.json_file, options.host,
        options.port, options.user,
        options.ssh_key, options.password, True)

    subnet_data_printer.print_validator_data(
        options.vtrust_threshold,
        options.updated_threshold)

    print("")


if __name__ == "__main__":
    main()
