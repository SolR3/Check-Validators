#!/usr/bin/env python3

# standard imports
import argparse
import os
from rich.text import Text
from rich.table import Table
from rich.console import Console
import sys

# Import local subnet_data module
sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path
from subnet_data import SubnetDataFromWebServer


DEFAULT_VTRUST_THRESHOLD = 0.2
DEFAULT_UPDATED_THRESHOLD = 3

# TODO - Move this into python module and merge with check_validators

def _parse_args():    
    class VtrustAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 0 or values > 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Vtrust threshold ({values}) must be in the "
                             "range (0-1].")
            setattr(namespace, self.dest, values)
    
    class UpdatedAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Updated threshold ({values}) must be > 1.")
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--json-file",
        required=True,
        help="The json filepath on the web server.")

    parser.add_argument(
        "--public-IP",
        required=True,
        dest="public_ip",
        help="The web server public IP address.")
    
    parser.add_argument(
        "--port",
        type=int,
        required=True,
        help="The web server url port.")
    
    parser.add_argument(
        "--user",
        required=True,
        help="The ssh user name to authenticate with.")

    parser.add_argument(
        "--password",
        help="The password of the user to ssh as.")

    parser.add_argument(
        "-V", "--vtrust-threshold",
        type=float,
        default=DEFAULT_VTRUST_THRESHOLD,
        action = VtrustAction,
        help="The vTrust threshold. Float value betweeon (0-1]. If "
             "Rizzo vTrust < (avg vTrust - threshold) then it is bad. "
            f"The default value is {DEFAULT_VTRUST_THRESHOLD}.")

    parser.add_argument(
        "-U", "--updated-threshold",
        type=float,
        default=DEFAULT_UPDATED_THRESHOLD,
        action = UpdatedAction,
        help="The Updated value threshold. Float value > 1. If "
             "Rizzo Updated > (subnet tempo * threshold) then it is bad. "
            f"The default value is {DEFAULT_UPDATED_THRESHOLD}.")

    return parser.parse_args()


class SubnetDataPrinter:
    def __init__(self, json_file, public_ip, port, username, password):
        self._validator_data = SubnetDataFromWebServer(
            json_file, public_ip, port, username, password, True
        ).validator_data

    def print_validator_data(
            self, vtrust_error_threshold, updated_error_threshold):
        updated_warning_threshold = (updated_error_threshold - 1)/2 + 1
        printer = TablePrinter()

        def sort_key(netuid):
            return -1 * self._validator_data[netuid].subnet_emission

        total_emission = 0.0

        # Loop through all subnets and print out
        # their vtrust and updated data.
        for netuid in sorted(self._validator_data, key=sort_key):
            validator_data = self._validator_data[netuid]

            if validator_data.rizzo_emission is not None:
                total_emission += validator_data.rizzo_emission

            if (validator_data.rizzo_vtrust is None
                    or (validator_data.avg_vtrust
                        - validator_data.rizzo_vtrust)
                        > vtrust_error_threshold):
                vtrust_status = 2
            else:
                vtrust_status = 0

            if (validator_data.rizzo_updated is None
                    or (validator_data.rizzo_updated
                        / validator_data.subnet_tempo)
                        > updated_error_threshold):
                updated_status = 2
            elif ((validator_data.rizzo_updated
                    / validator_data.subnet_tempo)
                        > updated_warning_threshold):
                updated_status = 1
            else:
                updated_status = 0

            printer.update_printout(
                validator_data, vtrust_status, updated_status)

        # Print extra stuff
        printer.add_extra_printout(total_emission)
        
        # Print everything
        printer.print_everything()


# TODO - Fold this into TablePrinter
class RichPrinter:
    _red = "9"
    _green = "10"
    _yellow = "11"
    _tab = "    "

    def __init__(self):
        self._console = Console()
        self._extra_printout = []

    def _get_style(self, status):
        if status == 2:
            return f"color({self._red})"
        elif status == 1:
                return f"color({self._yellow})"
        else:
            return f"color({self._green})"
    
    def _get_float_value(self, value):
        if value is None:
            return "---"
        return f"{value:.5f}"
        
    def _get_int_value(self, value):
        if value is None:
            return "---"
        return str(value)
    
    def add_extra_printout(self, total_emission):
        self._extra_printout.append(
            Text(f"\nTotal Emission = {total_emission:.5f}"))

    def print_everything(self):
        for text in self._extra_printout:
            self._console.print(text)


class TablePrinter(RichPrinter):

    def __init__(self,):
        super().__init__()

        self._table = Table(title="Rizzo Validators")
        self._table.add_column(
            "Subnet", justify="center", no_wrap=True)
        self._table.add_column(
            "Subnet E", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo Rank", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo E", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Max vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Avg vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Min vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo U", justify="center", no_wrap=True)
        self._table.add_column(
            "Min U", justify="center", no_wrap=True)
        self._table.add_column(
            "Avg U", justify="center", no_wrap=True)
        self._table.add_column(
            "Max U", justify="center", no_wrap=True)

    def update_printout(self, validator_data, vtrust_status, updated_status):
        if validator_data.rizzo_stake_rank is None:
            rizzo_stake_rank = "---"
        else:
            rizzo_stake_rank = (
                f"{validator_data.rizzo_stake_rank}/"
                    f"{validator_data.num_validators}")

        columns = [
            Text(f"{validator_data.netuid}",
                 style=self._get_style(max(vtrust_status, updated_status))),
            Text(f"{validator_data.subnet_emission:.2f}%"),
            Text(rizzo_stake_rank),
            Text(self._get_float_value(validator_data.rizzo_emission)),
            Text(self._get_float_value(validator_data.rizzo_vtrust),
                 style=self._get_style(vtrust_status)),
            Text(self._get_float_value(validator_data.max_vtrust)),
            Text(self._get_float_value(validator_data.avg_vtrust)),
            Text(self._get_float_value(validator_data.min_vtrust)),
            Text(self._get_int_value(validator_data.rizzo_updated),
                 style=self._get_style(updated_status)),
            Text(self._get_int_value(validator_data.min_updated)),
            Text(self._get_int_value(validator_data.avg_updated)),
            Text(self._get_int_value(validator_data.max_updated)),
        ]
        self._table.add_row(*columns)

    def print_everything(self):
        self._console.print(self._table)
        super().print_everything()


def main():
    options = _parse_args()

    subnet_data_printer = SubnetDataPrinter(
        options.json_file, options.public_ip, options.port,
        options.user, options.password)

    subnet_data_printer.print_validator_data(
        options.vtrust_threshold,
        options.updated_threshold)


if __name__ == "__main__":
    main()
