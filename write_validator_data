#!/usr/bin/env python3

# bittensor import
import bittensor

# standard imports
import argparse
import json
import multiprocessing
import numpy
import os
import sys
import tempfile
import time

# Import local subnet_data module
sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path
from subnet_data import SubnetData


LOCAL_TIMEZONE = "MST7MDT"
TIMESTAMP_FILE_NAME = "timestamp.json"


def _parse_args():
    class ThreadsAction(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            if values < 0:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Thread value ({values}) must be >= 0.")
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    # TODO - Add a json checker action
    parser.add_argument(
        "-j", "--json-folder",
        required=True,
        help="The json folder in which to write the json files.")

    parser.add_argument(
        "-l", "--local-subtensor",
        help="When specified, use a local running subtensor. When not "
             "specified, use the 'finney' network subtensor.")

    parser.add_argument(
        "-p", "--processes",
        type=int,
        default=0,
        action = ThreadsAction,
        help="The number of processes. Each process will write a different json file "
             "for a range of validators.")

    parser.add_argument(
        "-t", "--threads",
        type=int,
        default=0,
        action = ThreadsAction,
        help="Gather the subnet metagraph data using the specified number of "
             "threads. When not specified, multithreading is not used.")

    parser.add_argument(
        "-o", "--run-once",
        action="store_true",
        help="When specified, the data gathering and json write happnes only once.")

    parser.add_argument(
        "-i", "--interval",
        type=float,
        default=5,
        help="The number of minutes between validator data gathering.")

    return parser.parse_args()


class SubnetDataWriter:
    json_file_name = "validator_data.json"

    def __init__(self, network, threads, json_folder):
        self._network = network
        self._threads = threads
        self._json_folder = json_folder

    def write_data(self, all_subnets, netuid_start=None, netuid_end=None):
        print("Gathering subnet data.")
        start_time = time.time()

        if netuid_start is not None:
            if netuid_end is not None:
                netuids = all_subnets[netuid_start:netuid_end+1]
                netuid_range = f"{netuid_start}-{netuid_end}"
            else:
                netuids = all_subnets[netuid_start:]
                netuid_range = f"{netuid_start}-"
            json_base, json_ext = os.path.splitext(self.json_file_name)
            json_file_name = f"{json_base}.{netuid_range}{json_ext}"
            final_json_file = os.path.join(self._json_folder, json_file_name)
        else:
            netuids = all_subnets[1:]
            final_json_file = os.path.join(self._json_folder, self.json_file_name)

        data_dict = SubnetData(
            netuids, self._network, self._threads, True
        ).to_dict()

        temp_json_file = final_json_file + ".tmp"
        print(f"\nWriting data to file: {temp_json_file}")
        with open(temp_json_file, "w") as fd:
            json.dump(data_dict, fd, indent=4)

        print(f"\nMoving {temp_json_file} to {final_json_file}")
        if os.path.exists(final_json_file):
            os.unlink(final_json_file)
        os.rename(temp_json_file, final_json_file)

        total_time = time.time() - start_time
        print(f"\nSubnet data gathering took {format_time(round(total_time))}.\n")


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)

    runtime_text = [f"{minutes} minutes"] if minutes else []
    if seconds:
        runtime_text += [f"{seconds} seconds"]
    runtime_text = ", ".join(runtime_text)

    return runtime_text


def write_json_file(all_subnets, sleep_time=0, subnet_data_writer=None,
                    network=None, threads=None, json_folder=None,
                    netuid_start=None, netuid_end=None):
    if sleep_time:
        time.sleep(sleep_time)
    if not subnet_data_writer:
        subnet_data_writer = SubnetDataWriter(
            network, threads, json_folder)
    subnet_data_writer.write_data(all_subnets, netuid_start, netuid_end)


def write_timestamp(json_folder):
    os.environ["TZ"] = LOCAL_TIMEZONE
    time.tzset()

    max_file_time = 0
    json_base, json_ext = os.path.splitext(SubnetDataWriter.json_file_name)
    for _file in os.listdir(json_folder):
        file_base, file_ext = os.path.splitext(_file)
        if not file_base.startswith(json_base) or file_ext != json_ext:
            continue

        json_file = os.path.join(json_folder, _file)
        file_time = os.path.getmtime(json_file)
        if file_time > max_file_time:
            max_file_time = file_time
    
    timestamp = time.ctime(max_file_time)
    timestamp_file = os.path.join(json_folder, TIMESTAMP_FILE_NAME)
    print(f"\nWriting timestamp file: {timestamp_file}")
    with open(timestamp_file, "w") as fd:
            json.dump(timestamp, fd)


def get_multiprocess_args(all_subnets, network, num_processes, threads, json_folder):
    num_subnets = len(all_subnets) - 1
    chunk_size = int(numpy.ceil(num_subnets / num_processes))
    process_args = []
    netuid_start = 1
    sleep_time = 0
    while True:
        netuid_end = netuid_start + chunk_size - 1
        if netuid_end >= num_subnets:
            process_args.append(
                (all_subnets, sleep_time, None, network, threads, json_folder,
                    netuid_start, None))
            break
        else:
            process_args.append(
                (all_subnets, sleep_time, None, network, threads, json_folder,
                    netuid_start, netuid_end))
            netuid_start = netuid_end + 1
            sleep_time += 1

    return process_args


def main():
    # 
    # This is all very shoddy
    # 
    options = _parse_args()
    network = options.local_subtensor if options.local_subtensor else "finney"
    interval_seconds = round(options.interval * 60)

    os.makedirs(options.json_folder, exist_ok=True)

    if not options.processes:
        subnet_data_writer = SubnetDataWriter(
            network, options.threads, options.json_folder)
    
    while True:
        start_time = time.time()
        all_subnets = bittensor.subtensor(network=network).get_subnets()
        if options.processes:
            tempdir = tempfile.mkdtemp(prefix="write_vali_data_")
            process_args = get_multiprocess_args(
                all_subnets, network, options.processes, options.threads, tempdir)

            with multiprocessing.Pool(processes=options.processes) as pool:
                pool.starmap(write_json_file, process_args)

                for file_name in os.listdir(options.json_folder):
                    json_file = os.path.join(options.json_folder, file_name)
                    print(f"Removing {json_file}")
                    os.unlink(json_file)
                for file_name in os.listdir(tempdir):
                    src_json_file = os.path.join(tempdir, file_name)
                    dest_json_file = os.path.join(options.json_folder, file_name)
                    print(f"Moving {src_json_file} to {dest_json_file}")
                    os.rename(src_json_file, dest_json_file)

            os.rmdir(tempdir)

        else:
            write_json_file(all_subnets, subnet_data_writer=subnet_data_writer)

        write_timestamp(options.json_folder)

        if options.run_once:
            break

        total_seconds = round(time.time() - start_time)
        wait_seconds = interval_seconds - total_seconds
        if wait_seconds > 0:
            wait_time_formatted = format_time(wait_seconds)
            print(f"Waiting {wait_time_formatted}.")
            time.sleep(wait_seconds)

if __name__ == "__main__":
    main()
