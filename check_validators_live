#!/usr/bin/env python

# bittensor import
import bittensor

# standard imports
import argparse
import os
from rich.live import Live
from rich.table import Table
from rich.text import Text
import sys
import time

# Import local subnet_data module
sys.path = [os.path.join(os.path.dirname(__file__), "python")] + sys.path
from subnet_data import SubnetData


DEFAULT_VTRUST_THRESHOLD = 0.2
DEFAULT_UPDATED_THRESHOLD = 3

LOCAL_NETWORK = "ws://subtensor-cali.rizzo.network:9944"


def _parse_args():
    class ThreadsAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values < 0:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Thread value ({values}) must be >= 0.")
            setattr(namespace, self.dest, values)
    
    class VtrustAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 0 or values > 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Vtrust threshold ({values}) must be in the "
                             "range (0-1].")
            setattr(namespace, self.dest, values)
    
    class UpdatedAction(argparse.Action):       
        def __call__(self, parser, namespace, values, option_string=None):
            if values <= 1:
                raise argparse.ArgumentError(
                    argument=self,
                    message=f"Updated threshold ({values}) must be > 1.")
            setattr(namespace, self.dest, values)

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-V", "--vtrust-threshold",
        type=float,
        default=DEFAULT_VTRUST_THRESHOLD,
        action = VtrustAction,
        help="The vTrust threshold. Float value betweeon (0-1]. If "
             "Rizzo vTrust < (avg vTrust - threshold) then it is bad. "
            f"The default value is {DEFAULT_VTRUST_THRESHOLD}.")

    parser.add_argument(
        "-U", "--updated-threshold",
        type=float,
        default=DEFAULT_UPDATED_THRESHOLD,
        action = UpdatedAction,
        help="The Updated value threshold. Float value > 1. If "
             "Rizzo Updated > (subnet tempo * threshold) then it is bad. "
            f"The default value is {DEFAULT_UPDATED_THRESHOLD}.")

    parser.add_argument(
        "-t", "--threads",
        type=int,
        default=0,
        action = ThreadsAction,
        help="Gather the subnet metagraph data using the specified number of "
             "threads. When not specified, multithreading is not used.")

    args_group = parser.add_mutually_exclusive_group()
    args_group.add_argument(
        "-d", "--debug",
        action="store_true",
        help="When specified, debug data gathering debug output is printed.")

    args_group.add_argument(
        "-s", "--screen",
        action="store_true",
        help="When specified, screen=True is passed to the rich.live.Live "
             "context manager.")

    return parser.parse_args()


class SubnetDataPrinter:

    def __init__(self, options):
        self._vtrust_error_threshold = options.vtrust_threshold,
        self._updated_error_threshold = options.updated_threshold
        self._updated_warning_threshold = (options.updated_threshold - 1)/2 + 1

        self._threads = options.threads
        self._debug = options.debug

        # Get subtensor and list of netuids.
        self._netuids = bittensor.subtensor(network=LOCAL_NETWORK).get_subnets()[1:]

    def get_table(self):
        start_time = time.time()
        self._validator_data = SubnetData(
            self._netuids, LOCAL_NETWORK, self._threads, self._debug
        ).validator_data
        total_time = time.time() - start_time
        total_time_formatted = format_time(round(total_time))
        self._print_debug("\nSubnet data gathering took "
                         f"{total_time_formatted}.\n")
        return self._create_table_from_data(total_time_formatted)

    def _create_table_from_data(self, total_time_formatted):
        table_creator = TableCreator(total_time_formatted)

        def sort_key(netuid):
            return -1 * self._validator_data[netuid].subnet_emission

        # Loop through all subnets and print out
        # their vtrust and updated data.
        netuids = (sorted(self._netuids, key=sort_key))
        for netuid in netuids:
            validator_data = self._validator_data[netuid]

            if (validator_data.rizzo_vtrust is None
                    or (validator_data.avg_vtrust
                        - validator_data.rizzo_vtrust)
                        > self._vtrust_error_threshold):
                vtrust_status = 2
            else:
                vtrust_status = 0

            if (validator_data.rizzo_updated is None
                    or (validator_data.rizzo_updated
                        / validator_data.subnet_tempo)
                        > self._updated_error_threshold):
                updated_status = 2
            elif ((validator_data.rizzo_updated
                    / validator_data.subnet_tempo)
                        > self._updated_warning_threshold):
                updated_status = 1
            else:
                updated_status = 0
            
            table_creator.add_row(
                validator_data, vtrust_status, updated_status)
        
        return table_creator.table
    
    def _print_debug(self, message):
        if self._debug:
            print(message)


class TableCreator:
    _red = "9"
    _green = "10"
    _yellow = "11"

    def __init__(self, total_time_formatted):
        datetime = time.ctime()
        self._table = Table(
            title=f"Rizzo Validators\n(last updated {datetime} - "
                  f"{total_time_formatted} to gather data)")
        self._table.add_column(
            "Subnet", justify="center", no_wrap=True)
        self._table.add_column(
            "Subnet E", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo Rank", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo E", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Max vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Avg vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Min vT", justify="center", no_wrap=True)
        self._table.add_column(
            "Rizzo U", justify="center", no_wrap=True)
        self._table.add_column(
            "Min U", justify="center", no_wrap=True)
        self._table.add_column(
            "Avg U", justify="center", no_wrap=True)
        self._table.add_column(
            "Max U", justify="center", no_wrap=True)

    def add_row(self, validator_data, vtrust_status, updated_status):
        def _get_style(status):
            if status == 2:
                return f"color({self._red})"
            elif status == 1:
                return f"color({self._yellow})"
            else:
                return f"color({self._green})"
        
        def _get_float_value(value):
            if value is None:
                return "---"
            return f"{value:.5f}"
        
        def _get_int_value(value):
            if value is None:
                return "---"
            return str(value)

        if validator_data.rizzo_stake_rank is None:
            rizzo_stake_rank = "---"
        else:
            rizzo_stake_rank = (
                f"{validator_data.rizzo_stake_rank}/"
                    f"{validator_data.num_validators}")

        columns = [
            Text(f"{validator_data.netuid}",
                 style=_get_style(max(vtrust_status, updated_status))),
            Text(f"{validator_data.subnet_emission:.2f}%"),
            Text(rizzo_stake_rank),
            Text(_get_float_value(validator_data.rizzo_emission)),
            Text(_get_float_value(validator_data.rizzo_vtrust),
                 style=_get_style(vtrust_status)),
            Text(_get_float_value(validator_data.max_vtrust)),
            Text(_get_float_value(validator_data.avg_vtrust)),
            Text(_get_float_value(validator_data.min_vtrust)),
            Text(_get_int_value(validator_data.rizzo_updated),
                 style=_get_style(updated_status)),
            Text(_get_int_value(validator_data.min_updated)),
            Text(_get_int_value(validator_data.avg_updated)),
            Text(_get_int_value(validator_data.max_updated)),
        ]
        self._table.add_row(*columns)
    
    @property
    def table(self):
        return self._table


def format_time(total_time):
    m = total_time/60
    minutes = int(m)
    seconds = round((m - minutes)*60)
    
    runtime_text = f"{minutes}m " if minutes else ""
    runtime_text += f"{seconds}s"
    
    return runtime_text


def main():
    options = _parse_args()
    subnet_data = SubnetDataPrinter(options)
    try:
        with Live(
                subnet_data.get_table(),
                auto_refresh=False,
                screen=options.screen) as live:
            while True:
                live.update(subnet_data.get_table(), refresh=True)
    except KeyboardInterrupt:
        sys.stdout = open(os.devnull, 'w')
        sys.stderr = open(os.devnull, 'w')
        os.kill(os.getpid())


if __name__ == "__main__":
    main()
